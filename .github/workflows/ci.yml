name: Code Quality and Sanity Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
        version: 1.8.3

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-ci-${{ hashFiles('poetry-ci.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-ci-

    - name: Install dependencies
      run: |
        # Save original pyproject.toml
        cp pyproject.toml pyproject.toml.bak
        # Create pyproject-ci.toml with CPU source
        cp pyproject.toml pyproject-ci.toml
        echo '[[tool.poetry.source]]' >> pyproject-ci.toml
        echo 'name = "pytorch-cpu"' >> pyproject-ci.toml
        echo 'url = "https://download.pytorch.org/whl/cpu"' >> pyproject-ci.toml
        echo 'priority = "explicit"' >> pyproject-ci.toml
        # Use pyproject-ci.toml for CPU dependencies
        mv pyproject-ci.toml pyproject.toml
        poetry --no-ansi config virtualenvs.path .venv
        poetry --no-ansi lock
        mv poetry.lock poetry-ci.lock
        poetry --no-ansi install --with dev --no-root --no-interaction
        # Restore original pyproject.toml
        mv pyproject.toml.bak pyproject.toml
        # Sync poetry-ci.lock with restored pyproject.toml
        cp poetry-ci.lock poetry.lock
        poetry --no-ansi lock --no-update

    - name: Validate pyproject.toml
      run: poetry check

    - name: Debug
      run: |
        echo "Current directory:"
        pwd
        echo "List files:"
        ls -la
        echo "List src/ files:"
        ls -la src/ || echo "src/ not found"
        echo "List src/models/ files:"
        ls -la src/models/ || echo "src/models/ not found"
        echo "List src/optimization/ files:"
        ls -la src/optimization/ || echo "src/optimization/ not found"
        echo "List src/data_loaders/ files:"
        ls -la src/data_loaders/ || echo "src/data_loaders/ not found"
        echo "Contents of .mypy.ini:"
        cat .mypy.ini || echo ".mypy.ini not found"
        echo "Versions:"
        poetry run pip show mypy torch
        echo "File encodings:"
        file pyproject.toml .mypy.ini
        echo "PYTHONPATH:"
        echo $PYTHONPATH

    - name: Run Black (Check only)
      run: poetry run black --check src/

    - name: Run Flake8
      run: poetry run flake8 src/

    - name: Run Mypy
      run: poetry run mypy src/ --config-file=./.mypy.ini

    - name: Run Minimal Functional Test
      run: >-
        PYTHONPATH=${PWD} poetry run python -c "import torch;
        from src.data_loaders import get_cifar10_loaders;
        from src.models.arch import SimpleCNN, get_model;
        from src.optimization.optimizers import get_optimizer_and_scheduler;

        model_cnn = SimpleCNN().to(torch.device('cpu'));
        model_resnet = get_model(model_name='resnet18', device='cpu');

        config_adam = {'optimizer_name': 'adam', 'lr': 0.001};
        adam, _ = get_optimizer_and_scheduler(model_cnn, config_adam, num_epochs=1);

        print('Sanity check: Models and Optimizers initialized successfully.')"
