name: Code Quality and Sanity Check

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  linting_and_types:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', 'poetry.lock') }}-v2
        restore-keys: ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install poetry
        poetry config virtualenvs.create false
        poetry install --extras dev
      env:
        PIP_INDEX_URL: https://download.pytorch.org/whl/cpu

    - name: Run Black (Check only)
      run: black --check src/

    - name: Run Flake8
      run: flake8 src/

    - name: Run Mypy
      run: mypy src/

  sanity_check:
    runs-on: ubuntu-latest
    needs: linting_and_types
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-sanity-${{ hashFiles('requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-sanity-

    - name: Install core dependencies
      run: |
        pip install poetry
        poetry config virtualenvs.create false
        poetry install
      env:
        PIP_INDEX_URL: https://download.pytorch.org/whl/cpu

    - name: Run Minimal Functional Test
      run: >-
        python -c "import torch;
        from src.data_loaders import get_dataloaders;
        from src.models.arch import SimpleCNN, init_resnet18;
        from src.optimization.optimizers import init_optimizer;
        model_cnn = SimpleCNN().to(torch.device('cpu'));
        model_resnet = init_resnet18(weights=None).to(torch.device('cpu'));
        adam = init_optimizer(model_cnn.parameters(), 'adam', lr=0.001);
        print('Sanity check: Models and Optimizers initialized successfully.')"
