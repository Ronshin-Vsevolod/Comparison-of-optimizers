name: Code Quality and Sanity Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('poetry-ci.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: |
        # Create temporary pyproject.toml with CPU source
        cp pyproject.toml pyproject-ci.toml
        echo '[tool.poetry.source]' >> pyproject-ci.toml
        echo 'name = "pytorch-cpu"' >> pyproject-ci.toml
        echo 'url = "https://download.pytorch.org/whl/cpu"' >> pyproject-ci.toml
        echo 'priority = "explicit"' >> pyproject-ci.toml
        # Use temporary pyproject.toml for CPU dependencies
        poetry --no-ansi config virtualenvs.path .venv
        poetry --no-ansi lock --no-update --config pyproject-ci.toml
        mv poetry.lock poetry-ci.lock
        poetry --no-ansi install --with dev --no-root --no-interaction --config pyproject-ci.toml
        rm pyproject-ci.toml

    - name: Run Black (Check only)
      run: poetry run black --check src/

    - name: Run Flake8
      run: poetry run flake8 src/

    - name: Run Mypy
      run: poetry run mypy src/

    - name: Run Minimal Functional Test
      run: >-
        poetry run python -c "import torch;
        from src.data_loaders import get_dataloaders;
        from src.models.arch import SimpleCNN, init_resnet18;
        from src.optimization.optimizers import init_optimizer;
        model_cnn = SimpleCNN().to(torch.device('cpu'));
        model_resnet = init_resnet18(weights=None).to(torch.device('cpu'));
        adam = init_optimizer(model_cnn.parameters(), 'adam', lr=0.001);
        print('Sanity check: Models and Optimizers initialized successfully.')"
